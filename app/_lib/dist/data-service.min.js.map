{"version":3,"sources":["data-service.js"],"names":["_dateFns","require","_supabase","_navigation","getCabin","id","_ref","data","error","regeneratorRuntime","async","_context","prev","next","awrap","supabase","from","select","eq","single","sent","console","notFound","abrupt","stop","getCabinPrice","_ref2","_context2","getCabins","_ref3","_context3","order","getGuest","email","_ref4","_context4","getBooking","_ref5","_context5","count","getBookings","guestId","_ref6","_context6","Error","getBookedDatesByCabinId","today","_ref7","bookedDates","_context7","Date","setUTCHours","toISOString","cabinId","or","concat","map","booking","eachDayOfInterval","start","startDate","end","endDate","flat","getSettings","_ref8","_context8","getCountries","fetch","res","json","countries","createGuest","newGuest","_ref9","_context10","insert","createBooking","newBooking","updateGuest","updatedFields","_ref11","_context12","update","updateBooking","deleteBooking","_ref13","_context14"],"mappings":"yhBAAA,IAAAA,SAAAC,QAAA,YACAC,UAAAD,QAAA,cACAE,YAAAF,QAAA,mBAKO,SAAeG,SAASC,GAAxB,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACyBC,UAAAA,SAC3BC,KAAK,UACLC,OAAO,KACPC,GAAG,KAAMb,GACTc,UALE,KAAA,EAAA,OAAAb,EAAAK,EAAAS,KACGb,EADHD,EACGC,MAAMC,EADTF,EACSE,SAUZa,QAAQb,MAAMA,IACd,EAAAL,YAAAmB,aAZGX,EAAAY,OAAA,SANPhB,GAMO,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAa,UAkBA,SAAeC,cAAcpB,GAA7B,IAAAqB,EAAAnB,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAd,KAAA,EAAAJ,mBAAAK,MArBPC,UAAAA,SACAC,KAAA,UAEOC,OAAeb,0BAAfc,GAAA,KAAAb,GAuBFc,UALE,KAAA,EAAA,OAAAO,EAAAC,EAAAP,KArBPb,EAqBOmB,EArBPnB,MAAAC,EAqBOkB,EArBPlB,QAGOa,QAAAb,MAAAA,GAkBAmB,EAAAJ,OAAA,SAlBAhB,GAkBA,KAAA,EAAA,IAAA,MAAA,OAAAoB,EAAAH,UAlBA,IAAAI,UAAA,WAAA,IAAAC,EAAAtB,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAoB,GAAA,OAAA,OAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,KAAA,EAAA,OAAAiB,EAAAjB,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,SACGR,KAAAA,UAAMC,OAAAA,wDAkCXuB,MAAM,SAnCJ,KAAA,EAAA,GAAAF,EAAAC,EAAAV,KAAAb,EAAAsB,EAAAtB,KAAAC,EAAAqB,EAAArB,MAAA,MAULa,QAAAb,MAAIA,GACFa,IAAAA,MAAQb,8BAXLsB,EAAAjB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAiB,EAAAP,OAAA,SA0CEhB,GA1CF,KAAA,EAAA,IAAA,MAAA,OAAAuB,EAAAN,WAAA,SAAAQ,SAAAC,GAAA,IAAAC,EAAA3B,EAAA,OAAAE,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAsB,EAAAtB,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,SAAAC,KAAA,UAAAC,OAAA,KAAAC,GAAA,QAAAe,GAAAd,UAAA,KAAA,EAAA,OAAAe,EAAAC,EAAAf,KAAAb,EAAA2B,EAAA3B,KAAA2B,EAAA1B,MAAA2B,EAAAZ,OAAA,SAkBAhB,GAlBA,KAAA,EAAA,IAAA,MAAA,OAAA4B,EAAAX,UAkBA,SAAAY,WAAA/B,GAAA,IAAAgC,EAAA9B,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAA4B,GAAA,OAAA,OAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,KAAA,EAAA,OAAAyB,EAAAzB,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,SAAAC,KAAA,YAAAC,OAAA,KAAAC,GAAA,KAAAb,GA4CFc,UA5CE,KAAA,EAAA,GAAAkB,EAAAC,EAAAlB,KAAAb,EAAA8B,EAAA9B,KAAAC,EAAA6B,EAAA7B,MAAA6B,EAAAE,MAAA/B,EAAA,MACGD,QAAAA,MADHC,GACSA,IAAAA,MADT,gCAAA8B,EAAAzB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAyB,EAAAf,OAAA,SAQHF,GARG,KAAA,GAAA,IAAA,MAAA,OAAAiB,EAAAd,UAAA,SAAAgB,YAAAC,GAAA,IAAAC,EAAAnC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAiC,GAAA,OAAA,OAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,KAAA,EAAA,OAAA8B,EAAA9B,KAAA,EAAAJ,mBAAAK,MAuDgCC,UAAAA,SAvDhCC,KAAA,YAAAC,OAAA,+GAAAC,GAAA,UAAAuB,GAAAV,MAAA,cAAA,KAAA,EAAA,GAAAW,EAAAC,EAAAvB,KAuDGb,EAvDHmC,EAuDGnC,KAAMC,EAvDTkC,EAuDSlC,MAvDTkC,EAuDgBH,MA1CVX,EAbN,MAakBP,QAAAb,MAAAA,GAqDf,IAAIoC,MAAM,iCAlEbD,EAAA9B,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA8B,EAAApB,OAAA,SAakBhB,GAblB,KAAA,GAAA,IAAA,MAAA,OAAAoC,EAAAnB,UAakB,SAAAqB,wBACO9B,GADP,IAAA+B,EAAAC,EAAAxC,EAAAC,EAAAwC,EAAA,OAAAvC,mBAAAC,MAAA,SAAAuC,GAAA,OAAA,OAAAA,EAAArC,KAAAqC,EAAApC,MAAA,KAAA,EAAA,OA4DnBiC,EAAQ,IAAII,MA5DOC,YAAA,EAAA,EAAA,EAAA,GAAAL,EAAAA,EAAAM,cAAAH,EAAApC,KAAA,EAAAJ,mBAAAK,MAiEOC,UAAAA,SAjEPC,KAAA,YAAAC,OAAA,KAAAC,GAAA,UAAAmC,GAAAC,GAiEO,iBAAAC,OAjEPT,EAiEO,2BAjEP,KAAA,EAAA,GAAAC,EAAAE,EAAA7B,KAiEfb,EAjEewC,EAiEfxC,KAAMC,EAjESuC,EAiETvC,MAjES,MAAAa,QAAAb,MAQfA,GAiEA,IAAIoC,MAAM,iCAzEKK,EAAApC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAmC,EAAAzC,EAAAiD,IAAA,SAAAC,GAAA,OAAA,EAAAzD,SAAA0D,mBAAA,CAAAC,MAAA,IAAAT,KAAAO,EAAAG,WAAAC,IAAA,IAAAX,KAAAO,EAAAK,aAoFpBC,OApFoBd,EAAA1B,OAAA,SAsFhByB,GAtFgB,KAAA,GAAA,IAAA,MAAA,OAAAC,EAAAzB,UAelB,SAAAwC,cAAA,IAAAC,EAAA1D,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAwD,GAAA,OAAA,OAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,KAAA,EAAA,OAAAqD,EAAArD,KAAA,EAAAJ,mBAAAK,MA2EyBC,UAAAA,SAASC,KAAK,YAAYC,OAAO,KAAKE,UA3E/D,KAAA,EAAA,GAAA8C,EAAAC,EAAA9C,KA2EGb,EA3EH0D,EA2EG1D,KAAMC,EA3ETyD,EA2ESzD,MA3ET,MAAAa,QAAAb,MAAAA,GAAA,IAAAoC,MAAA,gCAAAsB,EAAArD,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAqD,EAAA3C,OAAA,SAkFEhB,GAlFF,KAAA,EAAA,IAAA,MAAA,OAAA2D,EAAA1C,UACGjB,SADH4D,eACG5D,IAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MADH6D,MAwFD,sDAvFI7D,KAAAA,EAAAA,OADH8D,EACG9D,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MADH8D,EAAAC,QACG/D,KAAAA,EAAAA,OADHgE,EACGhE,EAAAA,KAAAA,EAAAA,OAAAA,SADHgE,GACGhE,KAAAA,GAAAA,MAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GADH,IAAAqC,MAAA,6BACGrC,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAUH,SAAAiE,YAAAC,GAAA,IAAAC,EAAAnE,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAiE,GAAA,OAAA,OAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,KAAA,EAAA,OAAA8D,EAAA9D,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,SAAAC,KAAA,UAAA4D,OAAA,CAAAH,KAAA,KAAA,EAAA,GAAAC,EAAAC,EAAAvD,KAAAb,EAAAmE,EAAAnE,KAAAC,EAAAkE,EAAAlE,MAAA,MAAAa,QAAAb,MAAAA,GAAA,IAAAoC,MAAA,8BAAA+B,EAAA9D,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA8D,EAAApD,OAAA,SAAAhB,GAAA,KAAA,EAAA,IAAA,MAAA,OAAAoE,EAAAnD,UACgBe,SADhBsC,cAAAC,GACgBvC,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAoGSxB,UAAAA,SArGzBC,KAAA,YAAA4D,OAAA,CAAAE,IAAA7D,SA0GFE,UAzGkBoB,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAoGbhC,EApGagC,EAoGbhC,KAAMC,EApGO+B,EAoGP/B,MApGO+B,MA4GnBlB,QAAQb,MAAMA,GA7GX,IAAAoC,MAAA,gCACgBL,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,SADhBhC,GACgBgC,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAuHhB,SAAewC,YAAY1E,EAAI2E,GAA/B,IAAAC,EAAA1E,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAwE,GAAA,OAAA,OAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,KAAA,EAAA,OAAAqE,EAAArE,KAAA,EAAAJ,mBAAAK,MAzGAC,UAAAA,SAAAC,KAAA,UA4GFmE,OAAOH,GA5GL9D,GAAA,KAAAb,GAAAY,SAAAE,UAyGA,KAAA,EAAA,GAAA8D,EAAAC,EAAA9D,KAzGeoB,EAyGfyC,EAzGezC,KAAAA,EAyGfyC,EAzGezC,MAyGf,MAzGAnB,QAAAb,MAAAA,GACgC,IAGlCS,MACC,8BAoGCiE,EAAArE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAqE,EAAA3D,OAAA,SAzGAhB,GAyGA,KAAA,EAAA,IAAA,MAAA,OAAA2E,EAAA1D,UAxGShB,SADT4E,cAAA/E,EAAA2E,GACSxE,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MADTO,UAAAA,SA0HFC,KAAK,YA1HHmE,OAAAH,GAAA9D,GAAA,KAAAb,GAAAY,SAAAE,UACSX,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAAO+B,EAAP/B,EAAO+B,KADhB/B,EACSA,EADTA,MACSA,MADTa,QAAAb,MAYGA,GAsHA,IAAIoC,MAAM,gCAjIJpC,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,SADTD,GACSC,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UADT,SAAA6E,cAAAhF,GAAA,IAAAiF,EAAA/E,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAA6E,GAAA,OAAA,OAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,KAAA,EAAA,OAAA0E,EAAA1E,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,SAAAC,KAAA,YAAA,SAAAE,GAAA,KAAAb,IAAA,KAAA,EAAA,GAAAiF,EAAAC,EAAAnE,KAAAb,EAAA+E,EAAA/E,KAAAC,EAAA8E,EAAA9E,MAAA,MAkBAa,QAAewB,MAAAA,GAAf,IAAAD,MAAA,gCAlBA2C,EAAA1E,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA0E,EAAAhE,OAAA,SAkBAhB,GAlBA,KAAA,EAAA,IAAA,MAAA,OAAAgF,EAAA/D","file":"data-service.min.js","sourcesContent":["import { eachDayOfInterval } from 'date-fns';\nimport { supabase } from './supabase';\nimport { notFound } from 'next/navigation';\n\n/////////////\n// GET\n\nexport async function getCabin(id) {\n  const { data, error } = await supabase\n    .from('cabins')\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  // For testing\n  // await new Promise((res) => setTimeout(res, 1000));\n\n  if (error) {\n    console.error(error);\n    notFound()\n  }\n\n  return data;\n}\n\nexport async function getCabinPrice(id) {\n  const { data, error } = await supabase\n    .from('cabins')\n    .select('regularPrice, discount')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(error);\n  }\n  return data;\n}\n\nexport const getCabins = async function () {\n  const { data, error } = await supabase\n    .from('cabins')\n    .select('id, name, maxCapacity, regularPrice, discount, image')\n    .order('name');\n\n  if (error) {\n    console.error(error);\n    throw new Error('Cabins could not be loaded');\n  }\n\n  return data;\n};\n\n// Guests are uniquely identified by their email address\nexport async function getGuest(email) {\n  const { data, error } = await supabase\n    .from('guests')\n    .select('*')\n    .eq('email', email)\n    .single();\n\n  // No error here! We handle the possibility of no guest in the sign in callback\n  return data;\n}\n\nexport async function getBooking(id) {\n  const { data, error, count } = await supabase\n    .from('bookings')\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Booking could not get loaded');\n  }\n\n  return data;\n}\n\nexport async function getBookings(guestId) {\n  const { data, error, count } = await supabase\n    .from('bookings')\n    // We actually also need data on the cabins as well. But let's ONLY take the data that we actually need, in order to reduce downloaded data.\n    .select(\n      'id, created_at, startDate, endDate, numNights, numGuests, totalPrice, guestId, cabinId, cabins(name, image)'\n    )\n    .eq('guestId', guestId)\n    .order('startDate');\n\n  if (error) {\n    console.error(error);\n    throw new Error('Bookings could not get loaded');\n  }\n\n  return data;\n}\n\nexport async function getBookedDatesByCabinId(cabinId) {\n  let today = new Date();\n  today.setUTCHours(0, 0, 0, 0);\n  today = today.toISOString();\n\n  // Getting all bookings\n  const { data, error } = await supabase\n    .from('bookings')\n    .select('*')\n    .eq('cabinId', cabinId)\n    .or(`startDate.gte.${today},status.eq.checked-in`);\n\n  if (error) {\n    console.error(error);\n    throw new Error('Bookings could not get loaded');\n  }\n\n  // Converting to actual dates to be displayed in the date picker\n  const bookedDates = data\n    .map((booking) => {\n      return eachDayOfInterval({\n        start: new Date(booking.startDate),\n        end: new Date(booking.endDate),\n      });\n    })\n    .flat();\n\n  return bookedDates;\n}\n\nexport async function getSettings() {\n  const { data, error } = await supabase.from('settings').select('*').single();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Settings could not be loaded');\n  }\n\n  return data;\n}\n\nexport async function getCountries() {\n  try {\n    const res = await fetch(\n      'https://restcountries.com/v2/all?fields=name,flag'\n    );\n    const countries = await res.json();\n    return countries;\n  } catch {\n    throw new Error('Could not fetch countries');\n  }\n}\n\n/////////////\n// CREATE\n\nexport async function createGuest(newGuest) {\n  const { data, error } = await supabase.from('guests').insert([newGuest]);\n\n  if (error) {\n    console.error(error);\n    throw new Error('Guest could not be created');\n  }\n\n  return data;\n}\n\nexport async function createBooking(newBooking) {\n  const { data, error } = await supabase\n    .from('bookings')\n    .insert([newBooking])\n    // So that the newly created object gets returned!\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Booking could not be created');\n  }\n\n  return data;\n}\n\n/////////////\n// UPDATE\n\n// The updatedFields is an object which should ONLY contain the updated data\nexport async function updateGuest(id, updatedFields) {\n  const { data, error } = await supabase\n    .from('guests')\n    .update(updatedFields)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Guest could not be updated');\n  }\n  return data;\n}\n\nexport async function updateBooking(id, updatedFields) {\n  const { data, error } = await supabase\n    .from('bookings')\n    .update(updatedFields)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Booking could not be updated');\n  }\n  return data;\n}\n\n/////////////\n// DELETE\n\nexport async function deleteBooking(id) {\n  const { data, error } = await supabase.from('bookings').delete().eq('id', id);\n\n  if (error) {\n    console.error(error);\n    throw new Error('Booking could not be deleted');\n  }\n  return data;\n}\n"]}