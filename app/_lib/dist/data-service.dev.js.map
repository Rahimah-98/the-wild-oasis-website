{"version":3,"sources":["data-service.js"],"names":["getCabin","id","supabase","from","select","eq","single","data","error","console","getCabinPrice","getCabins","order","Error","getGuest","email","getBooking","count","getBookings","guestId","getBookedDatesByCabinId","cabinId","today","Date","setUTCHours","toISOString","or","bookedDates","map","booking","start","startDate","end","endDate","flat","getSettings","getCountries","fetch","res","json","countries","createGuest","newGuest","insert","createBooking","newBooking","updateGuest","updatedFields","update","updateBooking","deleteBooking"],"mappings":"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","sourcesContent":["import { eachDayOfInterval } from 'date-fns';\r\nimport { supabase } from './supabase';\r\nimport { notFound } from 'next/navigation';\r\n\r\n/////////////\r\n// GET\r\n\r\nexport async function getCabin(id) {\r\n  const { data, error } = await supabase\r\n    .from('cabins')\r\n    .select('*')\r\n    .eq('id', id)\r\n    .single();\r\n\r\n  // For testing\r\n  // await new Promise((res) => setTimeout(res, 2000));\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    notFound();\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getCabinPrice(id) {\r\n  const { data, error } = await supabase\r\n    .from('cabins')\r\n    .select('regularPrice, discount')\r\n    .eq('id', id)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n  }\r\n  return data;\r\n}\r\n\r\nexport const getCabins = async function () {\r\n  const { data, error } = await supabase\r\n    .from('cabins')\r\n    .select('id, name, maxCapacity, regularPrice, discount, image')\r\n    .order('name');\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Cabins could not be loaded');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Guests are uniquely identified by their email address\r\nexport async function getGuest(email) {\r\n  const { data, error } = await supabase\r\n    .from('guests')\r\n    .select('*')\r\n    .eq('email', email)\r\n    .single();\r\n\r\n  // No error here! We handle the possibility of no guest in the sign in callback\r\n  return data;\r\n}\r\n\r\nexport async function getBooking(id) {\r\n  const { data, error, count } = await supabase\r\n    .from('bookings')\r\n    .select('*')\r\n    .eq('id', id)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Booking could not get loaded');\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getBookings(guestId) {\r\n  const { data, error, count } = await supabase\r\n    .from('bookings')\r\n    // We actually also need data on the cabins as well. But let's ONLY take the data that we actually need, in order to reduce downloaded data.\r\n    .select(\r\n      'id, created_at, startDate, endDate, numNights, numGuests, totalPrice, guestId, cabinId, cabins(name, image)'\r\n    )\r\n    .eq('guestId', guestId)\r\n    .order('startDate');\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Bookings could not get loaded');\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getBookedDatesByCabinId(cabinId) {\r\n  let today = new Date();\r\n  today.setUTCHours(0, 0, 0, 0);\r\n  today = today.toISOString();\r\n\r\n  // Getting all bookings\r\n  const { data, error } = await supabase\r\n    .from('bookings')\r\n    .select('*')\r\n    .eq('cabinId', cabinId)\r\n    .or(`startDate.gte.${today},status.eq.checked-in`);\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Bookings could not get loaded');\r\n  }\r\n\r\n  // Converting to actual dates to be displayed in the date picker\r\n  const bookedDates = data\r\n    .map((booking) => {\r\n      return eachDayOfInterval({\r\n        start: new Date(booking.startDate),\r\n        end: new Date(booking.endDate),\r\n      });\r\n    })\r\n    .flat();\r\n\r\n  return bookedDates;\r\n}\r\n\r\nexport async function getSettings() {\r\n  const { data, error } = await supabase.from('settings').select('*').single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Settings could not be loaded');\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getCountries() {\r\n  try {\r\n    const res = await fetch(\r\n      'https://restcountries.com/v2/all?fields=name,flag'\r\n    );\r\n    const countries = await res.json();\r\n    return countries;\r\n  } catch {\r\n    throw new Error('Could not fetch countries');\r\n  }\r\n}\r\n\r\n/////////////\r\n// CREATE\r\n\r\nexport async function createGuest(newGuest) {\r\n  const { data, error } = await supabase.from('guests').insert([newGuest]);\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Guest could not be created');\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport async function createBooking(newBooking) {\r\n  const { data, error } = await supabase\r\n    .from('bookings')\r\n    .insert([newBooking])\r\n    // So that the newly created object gets returned!\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Booking could not be created');\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/////////////\r\n// UPDATE\r\n\r\n// The updatedFields is an object which should ONLY contain the updated data\r\nexport async function updateGuest(id, updatedFields) {\r\n  const { data, error } = await supabase\r\n    .from('guests')\r\n    .update(updatedFields)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Guest could not be updated');\r\n  }\r\n  return data;\r\n}\r\n\r\nexport async function updateBooking(id, updatedFields) {\r\n  const { data, error } = await supabase\r\n    .from('bookings')\r\n    .update(updatedFields)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Booking could not be updated');\r\n  }\r\n  return data;\r\n}\r\n\r\n/////////////\r\n// DELETE\r\n\r\nexport async function deleteBooking(id) {\r\n  const { data, error } = await supabase.from('bookings').delete().eq('id', id);\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    throw new Error('Booking could not be deleted');\r\n  }\r\n  return data;\r\n}\r\n"],"file":"data-service.dev.js"}